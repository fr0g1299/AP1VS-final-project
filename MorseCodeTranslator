
# -*- coding: utf-8 -*-

"""Main module for translator."""
import re  # removes extra spaces
import unicodedata  # removes diacritics
import subprocess  # copy to clipboard

morse_alphabet = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.',
                  'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---',
                  'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---',
                  'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-',
                  'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-',
                  'Y': '-.--', 'Z': '--..', '1': '.----', '2': '..---',
                  '3': '...--', '4': '....-', '5': '.....', '6': '-....',
                  '7': '--...', '8': '---..', '9': '----.', '0': '-----',
                  '.': '.-.-.-', ',': '--..--', '?': '..--..', '!': '-.-.--',
                  '/': '-..-.', '(': '-.--.', ')': '-.--.-', '&': '.-...',
                  ':': '---...', ';': '-.-.-.', '=': '-...-', '+': '.-.-.',
                  '-': '-....-', '_': '..--.-', '"': '.-..-.', '@': '.--.-.',
                  ' ': '|', "'": '.----.'}
confirmation_variants = {'YES', 'YE', 'Y', 'JO', 'ANO', 'J', 'JJ', 'ZES', 'Z',
                         'ZE', 'A'}
morse_contrary = dict((v, k) for (k, v) in morse_alphabet.items())


def preparation(txt):
    """Prepare the message for encrypting/decrypting.

    Removes spaces at the beginning and at the end of the message. Checks if
    the message only has ['.', '-', ' ', '|', '"'] characters. If yes then
    check remains True and later is redirected to the encryption method. If not
    then check becomes False and later is redirected to the decryption method.
    If message is in morse code it checks if there are ['"'] at the beginning
    and at the end of the message, if yes then it replaces it with morse code.
    Then it replaces extra 2-7 spaces into the morse code.
    If message is in alphanumeric state, code replaces every space to a single
    space, and then it removes any diacritics in the message.
    Returns prepared message and check boolean, which is later used to redirect
    code to the encryption or decryption method.

    Parameters
    ----------
    txt : string
        Inserted message

    Returns
    -------
    preparation_output : string
        Returns final form of the message
    check : bool
        True if message is morse code, False otherwise

    Examples
    --------
    >>> print(preparation('��������'))
    escrzyaie
    >>> print(preparation('Hello      World'))
    Hello World
    >>> print(preparation('...       ---   ...'))
    ... | --- | ...
    """
    preparation_output = txt.strip()
    check = True
    for i in preparation_output:
        if i != '.' and i != '-' and i != ' ' and i != '|' and i != '"':
            check = False
    if check is True:
        if preparation_output[0] == '"' and preparation_output[-1] == '"':
            preparation_output = preparation_output.replace('"', ' .-..-. ')\
                .strip()
        for j in ['       ', '      ', '     ', '    ', '   ', '  ']:
            if j in preparation_output:
                preparation_output = preparation_output.replace(j, ' | ')
    if check is False:
        preparation_output = re.sub(r'\s+', ' ', preparation_output,
                                    flags=re.UNICODE)
        preparation_output = unicodedata.normalize('NFKD', preparation_output)\
            .encode('ASCII', 'ignore').decode('utf-8', 'ignore')
    return preparation_output, check


def encrypt(txt):
    """Encrypts message to morse code.

    Changes characters to capital letters, then finds characters key in the
    dictionary morse_alphabet, stores his value in a string encrypt_output
    and puts a space for another character. At the end it removes the space
    at the end.

    Parameters
    ----------
    txt : string
        Inserted message

    Returns
    -------
    encrypt_output : string
        Returns the encrypted message

    Examples
    --------
    >>> print(encrypt('SOS'))
    ... --- ...
    """
    encrypt_output = ''
    for letter in txt.upper():
        encrypt_output += morse_alphabet.get(letter) + ' '
    return encrypt_output.strip()


def decrypt(txt):
    """Decrypts message to alphanumeric characters.

    Splits the message, then for every word finds his key in dictionary
    morse_contrary and stores his value to a string decrypt_output.

    Parameters
    ----------
    txt : string
        Inserted message

    Returns
    -------
    decrypt_output : string
        Returns the decrypted message

    Examples
    --------
    >>> print(encrypt('... --- ...'))
    SOS
    """
    decrypt_output = ''
    txt_split = txt.split(' ')
    for sign in txt_split:
        decrypt_output += morse_contrary.get(sign)
    return decrypt_output


def copy_to_clip_board(txt):
    """Copy result to clipboard.

    Parameters
    ----------
    txt : string
        Inserted message
    """
    subprocess.run(['clip'], text=True, input=txt)


if __name__ == '__main__':
    while True:
        message = str(input('Type your message: '))
        if message == '':
            print('Nothing was written...')
        else:
            message, is_input_morse = preparation(message)

            if is_input_morse is False:
                print('Encrypted message: ' + str(encrypt(message)) + '\n')
                copy_or_not = input('Do you want to copy the result? Type yes '
                                    'if you want it copied: ').upper()
                if copy_or_not in confirmation_variants:
                    copy_to_clip_board(encrypt(message))
            elif is_input_morse is True:
                print('Decrypted message: ' + str(decrypt(message)) + '\n')
                copy_or_not = input('Do you want to copy the result? Type yes '
                                    'if you want it copied: ').upper()
                if copy_or_not in confirmation_variants:
                    copy_to_clip_board(decrypt(message))

            continue_or_exit = input('Do you want to translate another string?'
                                     ' Type yes if you do: ').upper()
            print('')
            if continue_or_exit not in confirmation_variants:
                print('Goodbye...\n')
                break
